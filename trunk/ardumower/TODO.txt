  Ardumower (www.ardumower.de)
  Copyright (c) 2013-2014 by Alexander Grau
  Copyright (c) 2013-2014 by Sven Gennat
 
  This program is free software: you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program.  If not, see <http://www.gnu.org/licenses/>.


--TODO list--

For v1.0, we have some TODO topics like...


- imu.cpp: test and bugfix Nano-ported (but currently broken) code, fix/adjust calibration code etc.
- perimeter.cpp: test and improve new sender-off detection (idea: optimize smoothMag for this...)
- Arduino Due: improve due.cpp: tone(), so that Arduino library 'servo.h' can be used too (currently tone() conflicts with it)
- test/bugfix timer functionality
- solve 'motor current drift' problem (Sven) 
- use odometry ticks data for motor power control (PWM)     
- ArduRemote app (Alex)


------------------
Anheben:
bei y-Beschl. stoppen! (Peak pos. ohne Peak neg.)

Stoppen:
Jein. Zwei Kategorien:
1.Begrenzung also Schleife normale bremse und Beschleunigung (langsam)
2. Hindernis/Gefahr also Bumper/Sonar (Kinder Fuß) schnell stoppen

---
Jetzt müssen wir mal schauen was als nächstes hineinkommen soll...
Ich denke da an:

-Beschl.Sensor plotten
-US-Sensor: Langsam-Fahrt deaktivieren nach Timeout
-Versionnummern anzeigen in pfodApp/Konsole
-Fahrtrichtung: Vor/Zurück
-pfodApp: Schaltbare Ausgänge
-Beschleunig.Sensor - Mäher wieder anschalten falls nicht mehr aktiv
-Beschleunig.Sensor - negative Beschleunigung in Z-Achse erkennen (einfaches Anheben) und Mähwerk abschalten
-Test ohne Sensoren - analogRead Zufall falls Pin offen?!
-CIRCLE Mode
-Zurück zu "Schleife-suchen" falls Robot Schleife vollständig verloren hat
-"Nachhause-Fahren" automatisch einleiten bei Unterspannung (dazu muss der Spannungssensor laufen)
-Mähvorgang nach Aufladung automatisch fortsetzen (dazu muss der Spannungssensor u. ggf. Ladestromsensor laufen)
-Ladestation Timeout => Mäher etwas zurücksetzen
-Kompaß für Geradeausfahren bei Steigung
-Drehzahl links/rechts erhöhen bei Neigung
-Handy-App
-Mähen in Bahnen (Odometrie/GPS)
-Akku:Wenn der Arduino das ja alles überwacht, könnte man den Zustand dann nicht durch eine LED anzeigen lassen?
 Also so in der Art "Akku wird geladen - LED blinkt, Akku voll - LED ist an".
 Somit könnte die original Akku LED vom L50 Gehäuse genutzt werden und man sieht den aktuellen Zustand auch ohne  App.
 Weitere Idee dazu:
 Ich möchte diese LED (oder einen anderen Ausgang) mittels eines HomeMatic-Modules überwachen und mir den Status  an die Zentrale "funken" lassen, da ich eh verschiedene Statusmeldungen auf ein Tablet bzw. das Handy bekomme.

Einstellungen:
-Erlaubter Abstand zum Überfahren der Schleife (Zeit)

-----Daten Plotten--------------
-Batterie-Ladekurve
-Motordrehzahl
-GPS-Koordinaten


---PWM Bug------
I noticed, that frequency of MotorLeftPWM is about 960 Hz and two times bigger than MotorRightPWM (about 490 Hz).
The code looks good.
Then I changed following line in aml50.h
#define pinMotorLeftPWM 3
to
#define pinMotorLeftPWM 5
and now frequency is equal. 


gute Doku: http://www.mikrocontroller.net/articles/Motoransteuerung_mit_PWM
Ganz wichtig: Wahl der PWM-Frequenz
t=L/R
L kann man mit Induktivitätsmesser ermitteln (gutes Multimeter kann das - habe davon mehrere hier)
ok, kann ich auch machen hier
1,8 mH direkt am motorstecker
t=1,8*10^-3 / 7 Ohm= 25ms
sorry 0,25ms
4000 hz
jo
ist die ideale PWM Freq
würde sicherheitshalber aber mal mit 11 Ohm durchrechnen (inkl. Schutzwiderstände)
jo
und mir dann die Spitzen anschauen am Treiber 
wenn da keine Spitzen mehr vorhanden sind die Widerstände entfernen und mit 4kHz testen
oder aber direkt mit 4kHz oder Schutzwiderstände und dann die Betriebsspg. auf 12V legen
ohne Schutzwiderstände
ja, herantasten
-----Timer---------------

-Choose/change timer menu
No timer   
Timer 1     *
Timer 2
Timer 3
Timer 4
Timer 5


-Change 'Timer 1' menu
Sunday
Monday
Thuesday
Wednesday
Thursday
Friday
Saturday


-Change 'Timer 1, Monday' menu
Time slot 1 is ON
Start  09:00
End    10:00

Time slot 2 is OFF
Start  11:00
End    13:00

Time slot 3 is OFF
Start  11:00
End    13:00

----------------------------

User Defined State Machine (FSM)

                1:Forward   2:Reverse   3:Rotate left
Entry action    SPEED=100   SPEED=-100  LSPEED=50
Exit  action
Timeout mode    Start/100                
Timeout target  2:Reverse   3:Rotate    1:Forward
ELSE
Bumper Press    3:Reverse 
Bumper Release
----------------------------
Event:
bumperLeft == 1

Action:
leftSpeed == 50
------------------------------

WatchDog Timer
http://tushev.org/articles/arduino/item/46-arduino-and-watchdog-timer

First of all, you need to include corresponding header file:
#include <avr/wdt.h>

In the next step we should enable WDT as well as configure it:
wdt_enable(WDTO_2S);

In most cases you'll have to put that line to init(){} section, however, Watchdog timer may be enabled at any moment.

WDTO_2S is a constant that means threshold interval of 2 seconds. (It is defined inside header file). If Watchdog receive no "pat" signal for this period, it will "bite" back - reboot the MCU.

Threshold value 	Constant name 	Supported on
15 ms 	WDTO_15MS 	ATMega 8, 168, 328, 1280, 2560
30 ms 	WDTO_30MS 	ATMega 8, 168, 328, 1280, 2560
60 ms 	WDTO_60MS 	ATMega 8, 168, 328, 1280, 2560
120 ms 	WDTO_120MS 	ATMega 8, 168, 328, 1280, 2560
250 ms 	WDTO_250MS 	ATMega 8, 168, 328, 1280, 2560
500 ms 	WDTO_500MS 	ATMega 8, 168, 328, 1280, 2560
1 s 	WDTO_1S 	ATMega 8, 168, 328, 1280, 2560
2 s 	WDTO_2S 	ATMega 8, 168, 328, 1280, 2560
4 s 	WDTO_4S 	ATMega 168, 328, 1280, 2560
8 s 	WDTO_8S 	ATMega 168, 328, 1280, 2560

Finally, you should put the following line that tells watchdog that everything's ok.
wdt_reset();

Sure, it should be called from app's cycle more often than threshold period you have set for watchdog ends (at least, during normal operation mode). The beginning of loop() cycle could be a good idea, however, this depends on your program.

Also it's necessary to include it to every time-consuming operation. For instance, if you have data transmission cycle in your main loop, and this cycle lasts for a couple of seconds, you should put wdt_reset(); there as well, or your board may reset during transmission.

When choosing a treshold, take all time- and timing-related values into account: delays, function tresholds, bus timeouts and speed. Threshold value should always be greater than the largest value - at least 1.5 times greater in most cases. However, this depend on your application.

Another thing to take in mind is that it will reset the MCU, but not another hardware in your project, so you have to do it manually during Arduino initialization - if you have such hardware, sure.


IMPORTANT THING:

Quoting ATMega Datasheet:

    Note: If the Watchdog is accidentally enabled, for example by a runaway pointer or brown-out
    condition, the device will be reset and the Watchdog Timer will stay enabled. If the code is not
    set up to handle the Watchdog, this might lead to an eternal loop of time-out resets. To avoid this
    situation, the application software should always clear the Watchdog System Reset Flag
    (WDRF) and the WDE control bit in the initialisation routine, even if the Watchdog is not in use.

In older bootloaders (for 168, 2K size), the code checks whether it is running after WDT reset or not, and skips waiting for new program in this case. (See this file, line 286).

However, I could not find something similar in Optiboot bootloader (If I'm wrong, correct me please!), used by Arduino UNO and other new boards. It seems that they sacrificed this check for size. So, it is possible that watchdog timer will be enabled after reset, so -  if you set it's value too low, your board may never come out of bootloader stage. So, to be always on the safe side, set watchdog to longer periods (2S and more).

I hope this article will help you to make your projects more safe and reliable ;)

--------------------------------------

Positionserkennung

Kalman-Filter

Winkelsensor => Winkdelgeschw.  delPhi      => 
Kurs(GPS)    => Ausrichtung phiGPS          => Kalman =>  Ausrichtung phi    =>                
Odometrie    => Wegstrecke Sl, Sr                                            => Kalman => Position x,y,Ausrichtung phi   


GPSSpeed3D(Doppler) Genauigkeit: 0.1m/s 
     
--------------------------------------






